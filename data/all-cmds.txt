
#  update the OS
sudo apt update -y
sudo apt upgrade -y


# dev tools
sudo apt-get install build-essential git -y

## Virtualbox Guest Utlities for Shared Drive and Clipboard (optional)
sudo apt install dkms build-essential linux-headers-`uname -r`
sudo apt install virtualbox-guest-utils virtualbox-guest-dkms
sudo addgroup $(whoami) vboxsf

# install golang
apt-get install golang


### Python Development
sudo apt-get install python-dev python-pip python-virtualenv python-numpy python-matplotlib


#### Virtualenv Wrapper Installation
sudo pip install virtualenvwrapper
echo "source /usr/local/bin/virtualenvwrapper.sh" >> ~/.bashrc
# Create Virtualenv (env location is ~/.virtualenvs)
mkvirtualenv <env_name>
# select virtualenv
workon <env_name>


# For Machine Learning
mkvirtualenv ML
workon ML
pip install scipy scikit-learn matplotlib jupyter pandas numpy tensorflow keras seaborn


# For Web Development
mkvirtualenv web
workon web
pip install django beautifulsoup4 requests ipython


### Compiler Development
sudo apt install flex bison


### Networking tools 
sudo apt install libpcap-dev libnet1-dev rpcbind openssh-server nmap


### Computer Vision or Image Processing with OpenCV
sudo apt install python-numpy
cd ~
git clone https://github.com/Itseez/opencv.git
git clone https://github.com/Itseez/opencv_contrib.git
sudo apt-get install cmake pkg-config libjpeg8-dev libtiff-dev libjasper-dev libpng12-dev libgtk2.0-dev libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libatlas-base-dev gfortran libopencv-dev build-essential checkinstall cmake pkg-config yasm libtiff5-dev libjpeg-dev libjasper-dev libavcodec-dev libavformat-dev libswscale-dev libdc1394-22-dev libxine2-dev libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev libv4l-dev python-dev python-numpy libtbb-dev libqt4-dev libgtk2.0-dev libfaac-dev libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev libtheora-dev libvorbis-dev libxvidcore-dev x264 v4l-utils ffmpeg libgphoto2-dev
cd opencv
mkdir build
cd build
cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D INSTALL_C_EXAMPLES=ON -D INSTALL_PYTHON_EXAMPLES=ON -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules -D BUILD_EXAMPLES=ON -D WITH_QT=ON -D WITH_OPENGL=ON ..
make -j4
sudo make install
sudo ldconfig


### Parallel Processing with OpenMPI
sudo apt-get install libibnetdisc-dev
wget https://www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-1.10.2.tar.gz
tar -xzvf openmpi-1.10.2.tar.gz
# configure and build
./configure --prefix="~/.openmpi"
make -j4
sudo make install
echo "export PATH=$PATH:$HOME/.openmpi/bin" >> ~/.bashrc
echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/.openmpi/lib/" >> ~/.bashrc


### Android tools
sudo apt install android-tools-adb android-tools-fastboot


### Media tools
sudo apt install flashplugin-installer vlc ffmpeg


### Editor
install vim
sudo apt install vim


Install Atom Editor (https://github.com/atom/atom/releases/download/v1.23.3/atom-amd64.deb)
sudo dpkg -i atom-amd64.dev


Install Visual Studio Code [download](https://code.visualstudio.com/docs/?dv=linux64_deb)
sudo dpkg -i code_<version>.deb


### Ubuntu Customization (Theme and Icons)
#sudo apt install gnome-tweak-tool
# Create Theme and Icon directory
#mkdir ~/.icons ~/.themes
#Suggested Themes and 
#1. [Flatabulous](https://github.com/anmoljagetia/Flatabulous)
#2. [Paper-Theme](https://github.com/snwh/paper-gtk-theme)
#3. [Paper-Icon-Theme](https://github.com/snwh/paper-icon-theme)


### Install ZSH
sudo apt install zsh
curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh
chsh -s `which zsh`


### Web Development in PHP with Apache2 Web Server
sudo apt install apache2 apache2-utils libapache2-mod-php
sudo apt install php php-dev php-mcrypt php-mysql php-mbstring php-dom
sudo a2enmod rewrite
# Configure index.php for priorities add index.php `sudo nano /etc/apache2/mods-available/dir.conf`

echo "<IfModule mod_dir.c>
    DirectoryIndex index.php index.html index.cgi index.pl index.xhtml index.htm
</IfModule>" >> /etc/apache2/sites-available/000-default.conf
echo "<VirtualHost *:80>
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/html

    <Directory /var/www/html>
        Options FollowSymLinks MultiViews Indexes
        AllowOverride All
        Order allow,deny
        allow from all
    </Directory>

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>" >> /etc/apache2/apache2.conf
sudo service apache2 restart


### Java Development
sudo apt install openjdk-8-jdk
sudo apt install maven
# Install eclipse [dowload](http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/oxygen/2/eclipse-java-oxygen-2-linux-gtk-x86_64.tar.gz)


### Ruby Development
sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev
git clone https://github.com/rbenv/rbenv.git ~/.rbenv
git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
git clone https://github.com/rbenv/rbenv-gem-rehash.git ~/.rbenv/plugins/rbenv-gem-rehash
echo "export PATH=$PATH:$HOME/.rbenv/bin:$HOME/.rbenv/shims" >> ~/.bashrc
echo "eval $(rbenv init -)" >> ~/.bashrc
echo "export PATH=$HOME/.rbenv/plugins/ruby-build/bin:$PATH" >> ~/.bashrc
rbenv install 2.3.0
rbenv global 2.3.0
gem install bundler jekyll mysql2 rails jekyll-pagedown


### Database
sudo apt install mongodb-server
sudo apt install libsqlite3-dev sqlite3
sudo apt install mysql-server libmysqlclient-dev

sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4
sudo echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb.list
sudo apt update
sudo apt install mongodb-org -y
sudo systemctl enable mongod
sudo systemctl start mongod 
mongod --version 




### NodeJs Development - Node Version Manager
curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
nvm install --lts
npm -g i yarn


### ASP.NET Development
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
echo "deb http://download.mono-project.com/repo/debian wheezy main" | sudo tee /etc/apt/sources.list.d/mono-xamarin.list
sudo apt update
sudo apt install mono-devel mono-complete referenceassemblies-pcl ca-certificates-mono mono-xsp4
sudo apt install monodevelop-nunit monodevelop-versioncontrol monodevelop-database


### CLoud Storage (Dropbox)
cd ~ && wget -O - "https://www.dropbox.com/download?plat=lnx.x86_64" | tar xzf -
sh ~/.dropbox-dist/dropboxd
